{"version":3,"sources":["UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx"],"names":["UseQueryParamExample","useQueryParam","StringParam","foo","setFoo","NumericArrayParam","arr","setArr","prevArr","React","current","console","log","nextFoo","nanoid","nextArr","Math","round","random","className","language","style","atomOneLight","undefined","JSON","stringify","onClick","UseQueryParamsExample","useQueryParams","query","setQuery","App","props","example","setExample","href","ReactDOM","render","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.35c4afb3.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { nanoid } from 'nanoid';\n\nconst UseQueryParamExample = () => {\n  const [foo, setFoo] = useQueryParam('foo', StringParam);\n  const [arr, setArr] = useQueryParam('arr', NumericArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2 className=\"text-center\">useQueryParam Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [foo, setFoo] = useQueryParam('foo', StringParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button className=\"set-btn\" onClick={() => setFoo(nextFoo)}>\n            setFoo({JSON.stringify(nextFoo)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [arr, setArr] = useQueryParam('arr', NumericArrayParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'push')}>\n            setArr({JSON.stringify(nextArr)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'pushIn')}>\n            setArr({JSON.stringify(nextArr)}, 'pushIn')\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport {\n  useQueryParams,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { nanoid } from 'nanoid';\n\nconst UseQueryParamsExample = () => {\n  const [query, setQuery] = useQueryParams({\n    foo: StringParam,\n    arr: NumericArrayParam,\n  });\n  const { foo, arr } = query;\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2 className=\"text-center\">useQueryParams Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          {`const [query, setQuery] = useQueryParams({\n  foo: StringParam,\n  arr: NumericArrayParam,\n});\nconst { foo, arr } = query;`}\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'push')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'pushIn')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'pushIn')\n          </button>\n          <p>\n            With <code>setQuery</code>, we can update multiple parameters at\n            once.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr, foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ arr: nextArr, foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"text-center\">\n        <h1>useQueryParams</h1>\n        <div className=\"ext-nav\">\n          <a href=\"https://github.com/pbeshai/use-query-params\">GitHub</a>\n        </div>\n        <div className=\"nav\">\n          <button\n            className={example === 0 ? 'active' : undefined}\n            onClick={() => setExample(0)}\n          >\n            useQueryParam\n          </button>\n          <button\n            className={example === 1 ? 'active' : undefined}\n            onClick={() => setExample(1)}\n          >\n            useQueryParams\n          </button>\n        </div>\n      </header>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}